apiVersion: v1
kind: ConfigMap
metadata:
  name: nginx-conf
data:
  frankfurt.micheal.ch.conf: |
        server {
            listen 80 default_server;
            server_name _;

            # DNS resolver for dynamic domain name resolution
            # resolver 127.0.0.53;
            resolver 8.8.8.8 valid=10s;
            # resolver_timeout 10s;

            location / {
                # Capture the domain name from the client's request header (Host)
                set $target_domain $host;  # Capture the domain name from the request
                # Forward the request to the backend server with HTTPS
                # The target domain for proxy_pass is dynamically set by the $target_domain variable
                proxy_pass https://$target_domain;  # Use variable for proxy_pass
                # Send the original SNI hostname to the upstream server for proper SSL handshake
                proxy_ssl_server_name on;
                # Pass the original request headers to the backend server
                proxy_pass_request_headers on;
                
                # Set or reset the following headers for the upstream server
                # Pass the original Host header
                proxy_set_header        Host            $host;
                # Pass the original client IP to the backend/backend.
                proxy_set_header        X-Real-IP       $remote_addr;
                # Pass the original X-Forwarded-For, appending the client's IP.
                proxy_set_header        X-Forwarded-For $proxy_add_x_forwarded_for;
                # proxy_set_header        X-Forwarded-Proto $scheme;

                # Don't change any "Location" or "Refresh" headers in responses from upstream servers
                proxy_redirect      off;
            }
        }
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: nginx-test
  namespace: default
  labels:
    app: nginx-test
spec:      
  replicas: 1
  selector:
    matchLabels:
      app: nginx-test
  template:
    metadata:
      labels:
        app: nginx-test
    spec:
      hostAliases:
      - ip: "173.44.139.215"
        hostnames:
          - "frankfurt.micheal.ch"
      containers:
      - name: nginx
        image: nginxinc/nginx-unprivileged
        ports:
        - containerPort: 80
        volumeMounts:
        - mountPath: /etc/nginx/conf.d/frankfurt.micheal.ch.conf # mount nginx-conf volumn to /etc/nginx
          readOnly: true
          name: nginx-conf
          subPath: frankfurt.micheal.ch.conf
        - mountPath: /var/log/nginx
          name: log
        resources:
          limits:
            cpu: "1"
            memory: "512Mi"
          requests:
            cpu: "100m"
            memory: "256Mi"
      volumes:

      - name: nginx-conf
        configMap:
          name: nginx-conf
      - name: log
        emptyDir: {}

---
apiVersion: v1
kind: Service
metadata:
  name: test
spec:
  type: LoadBalancer
  ports:
  - port: 80
    targetPort: 80
  selector:
    app: nginx-test
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  annotations:
    cert-manager.io/cluster-issuer: letsencrypt-prod
    #nginx.ingress.kubernetes.io/backend-protocol: "HTTPS"
    #nginx.ingress.kubernetes.io/ssl-passthrough: "true"
    nginx.ingress.kubernetes.io/ssl-redirect: "true"
    #nginx.ingress.kubernetes.io/proxy-ssl-server-name: "on"
    #nginx.ingress.kubernetes.io/proxy-ssl-name: "https://frankfurt.micheal.ch"
    #nginx.ingress.kubernetes.io/upstream-vhost: "https://frankfurt.micheal.ch"
  name: test
  namespace: default
spec:
  ingressClassName: nginx
  rules:
  - host: frankfurt.micheal.ch
    http:
      paths:
      - backend:
          service:
            name: test
            port:
              number: 80
        path: /
        pathType: Prefix
  tls:
    - hosts:
      - frankfurt.micheal.ch
      secretName: frankfurt.micheal.ch